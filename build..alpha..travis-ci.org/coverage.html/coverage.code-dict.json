{"/home/travis/build/npmtest/node-npmtest-telegram-bot-api/test.js":"/* istanbul instrument in package npmtest_telegram_bot_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-telegram-bot-api/lib.npmtest_telegram_bot_api.js":"/* istanbul instrument in package npmtest_telegram_bot_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_telegram_bot_api = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_telegram_bot_api = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-telegram-bot-api/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-telegram-bot-api && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_telegram_bot_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_telegram_bot_api\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_telegram_bot_api.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_telegram_bot_api.rollup.js'] =\n            local.assetsDict['/assets.npmtest_telegram_bot_api.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_telegram_bot_api.__dirname +\n                    '/lib.npmtest_telegram_bot_api.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-telegram-bot-api/node_modules/telegram-bot-api/lib/telegram-bot.js":"\r\nvar util = require('util');\r\nvar fs = require('fs');\r\nvar extend = require('extend');\r\nvar request = require('request-promise');\r\nvar EventEmitter = require('events').EventEmitter;\r\nvar Promise = require('bluebird');\r\n\r\nPromise.onPossiblyUnhandledRejection(function(error) {\r\n  throw error;\r\n})\r\n\r\n/**\r\n * API params\r\n *      token                       access token for bot\r\n *      http_proxy                  proxy settings (optional)\r\n *          host                    proxy host\r\n *          port                    proxy port\r\n *          user                    username for proxy\r\n *          password                password for proxy\r\n *          https                   true/false\r\n *      updates\r\n *          enabled                 True if you want to receive updates from telegram (default false)\r\n *          get_interval            We will fetch updates from Telegram\r\n *                                  each number of milliseconds (default 1000)\r\n *          pooling_timeout         We will wait for updates during this num of\r\n *                                  milliseconds at each attempt before quit (default 0)\r\n */\r\n\r\nvar TelegramApi = function (params)\r\n{\r\n    // Manage REST connection settings\r\n    var proxy = null;\r\n    if (params.http_proxy !== undefined)\r\n    {\r\n        if (params.http_proxy.https === true)\r\n        {\r\n            proxy = 'https://';\r\n        }\r\n        else\r\n        {\r\n            proxy = 'http://';\r\n        }\r\n\r\n        if (params.http_proxy.user !== undefined &&\r\n            params.http_proxy.password !== undefined)\r\n        {\r\n            proxy += params.http_proxy.user + ':' + params.http_proxy.password + '@';\r\n        }\r\n\r\n        proxy += params.http_proxy.host + ':' + params.http_proxy.port;\r\n    }\r\n\r\n    // Create some global vars\r\n    var self = this;\r\n    var _updatesOffset = 0;\r\n\r\n    var _rest = request.defaults({\r\n        proxy: proxy\r\n    });\r\n\r\n    // Default settings\r\n    var _settings = {\r\n        updates: {\r\n            enabled: false,\r\n            get_interval: 1000,\r\n            pooling_timeout: 0\r\n        }\r\n    };\r\n\r\n    // Extend default settings with passed params\r\n    extend(true, _settings, params);\r\n\r\n    // Warn use in case if he miss some important params\r\n    if (!_settings.token)\r\n    {\r\n        console.error('[TelegramBot]: you should pass access token in params');\r\n    }\r\n\r\n    // This is base url for API\r\n    var _baseurl = 'https://api.telegram.org/bot' + _settings.token + '/';\r\n\r\n    /**\r\n     * INTERNAL FUNCTION\r\n     * Parse response\r\n     */\r\n    function commonResponseHandler(data)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            if (data.ok === false)\r\n            {\r\n                // Request failed\r\n                reject({\r\n                    description: data.description !== undefined ? data.description : 'Not set by API',\r\n                    code: data.error_code !== undefined ? data.error_code : 'Not set by API'\r\n                });\r\n            }\r\n            else\r\n            {\r\n                resolve(data.result);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * INTERNAL FUNCTION\r\n     * Gets updates from telegram and starts loop\r\n     */\r\n    function internalGetUpdates()\r\n    {\r\n        self.getUpdates({\r\n            offset: _updatesOffset,\r\n            limit: 50,\r\n            timeout: _settings.updates.pooling_timeout\r\n        })\r\n        .then(function (data)\r\n        {\r\n            if (!data)\r\n            {\r\n                throw new Error(\"[TelegramBot]: Received data is empty.\");\r\n            }\r\n            else\r\n            {\r\n                // We received some items, loop over them\r\n                ('forEach' in data) && data.forEach(function (item)\r\n                {\r\n                    // Account update_id as next offset\r\n                    // to avoid dublicated updates\r\n                    _updatesOffset = (item.update_id >= _updatesOffset ? item.update_id + 1 : _updatesOffset);\r\n\r\n                    // Update events\r\n                    self.emit('update', item);\r\n\r\n                    // Inline events\r\n                    if (item.callback_query) {\r\n                        self.emit('inline.callback.query', item.callback_query);\r\n                    }\r\n\r\n                    if (item.edited_message) {\r\n                        self.emit('edited.message', item.edited_message);\r\n                    }\r\n\r\n                    // On inline query is received\r\n                    if(item.inline_query)\r\n                    {\r\n                        self.emit('inline.query', item.inline_query);\r\n                    }\r\n\r\n                    // On inline result is chosen\r\n                    if(item.chosen_inline_result)\r\n                    {\r\n                        self.emit('inline.result', item.chosen_inline_result);\r\n                    }\r\n\r\n                    // Notify subscriber\r\n                    self.emit('message', item.message);\r\n                });\r\n            }\r\n\r\n            // Schedule follow up\r\n            setTimeout(internalGetUpdates, _settings.updates.get_interval);\r\n        })\r\n        .catch(function(err)\r\n        {\r\n            console.error('[TelegramBot]: Failed to get updates from Telegram servers');\r\n            console.error(err)\r\n\r\n            setTimeout(internalGetUpdates, _settings.updates.get_interval);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * METHOD: getMe\r\n     * PARAMS:\r\n     *      none\r\n     *      cb is opitonal, you may use promises\r\n     */\r\n    this.getMe = function (cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            _rest({\r\n                method: 'GET',\r\n                json: true,\r\n                uri: _baseurl + 'getMe'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: sendMessage\r\n     * PARAMS:\r\n     *      chat_id                     Unique identifier for the message recepient — User or GroupChat id\r\n     *      text                        Text of the message to be sent\r\n     *      disable_web_page_preview    Disables link previews for links in this message\r\n     *      reply_to_message_id         If the message is a reply, ID of the original message\r\n     *      reply_markup                Additional interface options. A JSON-serialized object\r\n     *                                  for a custom reply keyboard, instructions to hide keyboard\r\n     *                                  or to force a reply from the user.\r\n     *      parse_mode                  Send Markdown, if you want Telegram apps to show bold, italic and\r\n     *                                  inline URLs in your bot's message\r\n     */\r\n    this.sendMessage = function (params, cb)\r\n    {\r\n        var args = {};\r\n\r\n        if (params.chat_id !== undefined) args.chat_id = params.chat_id;\r\n        if (params.text !== undefined) args.text = params.text;\r\n        if (params.disable_web_page_preview !== undefined) args.disable_web_page_preview = params.disable_web_page_preview;\r\n        if (params.reply_to_message_id !== undefined) args.reply_to_message_id = params.reply_to_message_id;\r\n        if (params.reply_markup !== undefined) args.reply_markup = params.reply_markup;\r\n        if (params.parse_mode !== undefined) args.parse_mode = params.parse_mode;\r\n\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'sendMessage'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: forwardMessage\r\n     * PARAMS:\r\n     *      chat_id         Unique identifier for the message recepient — User or GroupChat id\r\n     *      from_chat_id    Unique identifier for the chat where the original message was sent — User or GroupChat id\r\n     *      message_id      Unique message identifier\r\n     */\r\n    this.forwardMessage = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            var args = {};\r\n\r\n            if (params.chat_id !== undefined) args.chat_id = params.chat_id;\r\n            if (params.from_chat_id !== undefined) args.from_chat_id = params.from_chat_id;\r\n            if (params.message_id !== undefined) args.message_id = params.message_id;\r\n\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'forwardMessage'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: sendPhoto\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the message recepient — User or GroupChat id\r\n     *      photo                   Photo to send. You can either pass a file_id as String to resend\r\n     *                              a photo that is already on the Telegram servers, or upload\r\n     *                              a new photo using multipart/form-data.\r\n     *      caption                 Photo caption (may also be used when resending photos by file_id)\r\n     *      reply_to_message_id     If the message is a reply, ID of the original message\r\n     *      reply_markup            Additional interface options. A JSON-serialized object for a custom\r\n     *                              reply keyboard, instructions to hide keyboard or to force a reply from the user.\r\n     */\r\n    this.sendPhoto = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            // Act different depending on value params.photo\r\n            fs.exists(params.photo, function (exists)\r\n            {\r\n                var photo = null;\r\n                if (exists)\r\n                {\r\n                    // params.photo is path to file\r\n                    photo = fs.createReadStream(params.photo);\r\n                }\r\n                else\r\n                {\r\n                    // params.photo is not a file, simply pass it to POST\r\n                    photo = params.photo;\r\n                }\r\n\r\n                var args = {\r\n                    chat_id: params.chat_id,\r\n                    photo: photo\r\n                };\r\n\r\n                if (params.caption !== undefined)\r\n                {\r\n                    args.caption = params.caption;\r\n                }\r\n\r\n                if (params.reply_to_message_id !== undefined)\r\n                {\r\n                    args.reply_to_message_id = params.reply_to_message_id;\r\n                }\r\n\r\n                if (params.reply_markup !== undefined)\r\n                {\r\n                    args.reply_markup = params.reply_markup;\r\n                }\r\n\r\n                _rest({\r\n                    method: 'POST',\r\n                    json: true,\r\n                    formData: args,\r\n                    uri: _baseurl + 'sendPhoto'\r\n                })\r\n                .then(function(body)\r\n                {\r\n                    return commonResponseHandler(body);\r\n                })\r\n                .then(function(data)\r\n                {\r\n                    resolve(data);\r\n                })\r\n                .catch(function(err)\r\n                {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: sendAudio\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the message recepient — User or GroupChat id\r\n     *      audio                   Audio file to send. You can either pass a file_id as String to resend\r\n     *                              a audio  that is already on the Telegram servers, or upload\r\n     *                              a new audio  using multipart/form-data.\r\n     *      reply_to_message_id     If the message is a reply, ID of the original message\r\n     *      reply_markup            Additional interface options. A JSON-serialized object for a custom\r\n     *                              reply keyboard, instructions to hide keyboard or to force a reply from the user.\r\n     *      duration                Duration of the audio in seconds (optional)\r\n     *      performer               Performer (optional)\r\n     *      title                   Track name (optional)\r\n     */\r\n    this.sendAudio = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            // Act different depending on value params.audio\r\n            fs.exists(params.audio, function (exists)\r\n            {\r\n                var audio = null;\r\n                if (exists)\r\n                {\r\n                    // params.audio is path to file\r\n                    audio = fs.createReadStream(params.audio);\r\n                }\r\n                else\r\n                {\r\n                    // params.audio is not a file, simply pass it to POST\r\n                    audio = params.audio;\r\n                }\r\n\r\n                var args = {\r\n                    chat_id: params.chat_id,\r\n                    audio: audio\r\n                };\r\n\r\n                if (params.reply_to_message_id !== undefined)\r\n                {\r\n                    args.reply_to_message_id = params.reply_to_message_id;\r\n                }\r\n\r\n                if (params.reply_markup !== undefined)\r\n                {\r\n                    args.reply_markup = params.reply_markup;\r\n                }\r\n\r\n                if (params.duration !== undefined)\r\n                {\r\n                    args.duration = params.duration;\r\n                }\r\n\r\n                if (params.performer !== undefined)\r\n                {\r\n                    args.performer = params.performer;\r\n                }\r\n\r\n                if (params.title !== undefined)\r\n                {\r\n                    args.title = params.title;\r\n                }\r\n\r\n                _rest({\r\n                    method: 'POST',\r\n                    json: true,\r\n                    formData: args,\r\n                    uri: _baseurl + 'sendAudio'\r\n                })\r\n                .then(function(body)\r\n                {\r\n                    return commonResponseHandler(body);\r\n                })\r\n                .then(function(data)\r\n                {\r\n                    resolve(data);\r\n                })\r\n                .catch(function(err)\r\n                {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: sendVoice\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the message recepient — User or GroupChat id\r\n     *      voice                   Audio file to send. You can either pass a file_id as String to resend\r\n     *                              a audio  that is already on the Telegram servers, or upload\r\n     *                              a new audio  using multipart/form-data.\r\n     *      reply_to_message_id     If the message is a reply, ID of the original message\r\n     *      reply_markup            Additional interface options. A JSON-serialized object for a custom\r\n     *                              reply keyboard, instructions to hide keyboard or to force a reply from the user.\r\n     *      duration                Duration of the audio in seconds (optional)\r\n     */\r\n    this.sendVoice = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            // Act different depending on value params.voice\r\n            fs.exists(params.voice, function (exists)\r\n            {\r\n                var voice = null;\r\n                if (exists)\r\n                {\r\n                    // params.voice is path to file\r\n                    voice = fs.createReadStream(params.voice);\r\n                }\r\n                else\r\n                {\r\n                    // params.voice is not a file, simply pass it to POST\r\n                    voice = params.voice;\r\n                }\r\n\r\n                var args = {\r\n                    chat_id: params.chat_id,\r\n                    voice: voice\r\n                };\r\n\r\n                if (params.reply_to_message_id !== undefined)\r\n                {\r\n                    args.reply_to_message_id = params.reply_to_message_id;\r\n                }\r\n\r\n                if (params.reply_markup !== undefined)\r\n                {\r\n                    args.reply_markup = params.reply_markup;\r\n                }\r\n\r\n                if (params.duration !== undefined)\r\n                {\r\n                    args.duration = params.duration;\r\n                }\r\n\r\n                _rest({\r\n                    method: 'POST',\r\n                    json: true,\r\n                    formData: args,\r\n                    uri: _baseurl + 'sendVoice'\r\n                })\r\n                .then(function(body)\r\n                {\r\n                    return commonResponseHandler(body);\r\n                })\r\n                .then(function(data)\r\n                {\r\n                    resolve(data);\r\n                })\r\n                .catch(function(err)\r\n                {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: sendDocument\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the message recepient — User or GroupChat id\r\n     *      document                File to send. You can either pass a file_id as String to resend\r\n     *                              a file that is already on the Telegram servers, or upload\r\n     *                              a new file using multipart/form-data.\r\n     *      reply_to_message_id     If the message is a reply, ID of the original message\r\n     *      reply_markup            Additional interface options. A JSON-serialized object for a custom\r\n     *                              reply keyboard, instructions to hide keyboard or to force a reply from the user.\r\n     */\r\n    this.sendDocument = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            // Act different depending on value params.document\r\n            fs.exists(params.document, function (exists)\r\n            {\r\n                var document = null;\r\n                if (exists)\r\n                {\r\n                    // params.document is path to file\r\n                    document = fs.createReadStream(params.document);\r\n                }\r\n                else\r\n                {\r\n                    // params.document is not a file, simply pass it to POST\r\n                    document = params.document;\r\n                }\r\n\r\n                var args = {\r\n                    chat_id: params.chat_id,\r\n                    document: document\r\n                };\r\n\r\n                if (params.reply_to_message_id !== undefined)\r\n                {\r\n                    args.reply_to_message_id = params.reply_to_message_id;\r\n                }\r\n\r\n                if (params.reply_markup !== undefined)\r\n                {\r\n                    args.reply_markup = params.reply_markup;\r\n                }\r\n\r\n                _rest({\r\n                    method: 'POST',\r\n                    json: true,\r\n                    formData: args,\r\n                    uri: _baseurl + 'sendDocument'\r\n                })\r\n                .then(function(body)\r\n                {\r\n                    return commonResponseHandler(body);\r\n                })\r\n                .then(function(data)\r\n                {\r\n                    resolve(data);\r\n                })\r\n                .catch(function(err)\r\n                {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: sendSticker\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the message recepient — User or GroupChat id\r\n     *      sticker                 Sticker to send. You can either pass a file_id as String to resend\r\n     *                              a sticker that is already on the Telegram servers, or upload\r\n     *                              a new sticker using multipart/form-data.\r\n     *      reply_to_message_id     If the message is a reply, ID of the original message\r\n     *      reply_markup            Additional interface options. A JSON-serialized object for a custom\r\n     *                              reply keyboard, instructions to hide keyboard or to force a reply from the user.\r\n     */\r\n    this.sendSticker = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            // Act different depending on value params.sticker\r\n            fs.exists(params.sticker, function (exists)\r\n            {\r\n                var sticker = null;\r\n                if (exists)\r\n                {\r\n                    // params.sticker is path to file\r\n                    sticker = fs.createReadStream(params.sticker);\r\n                }\r\n                else\r\n                {\r\n                    // params.sticker is not a file, simply pass it to POST\r\n                    sticker = params.sticker;\r\n                }\r\n\r\n                var args = {\r\n                    chat_id: params.chat_id,\r\n                    sticker: sticker\r\n                };\r\n\r\n                if (params.reply_to_message_id !== undefined)\r\n                {\r\n                    args.reply_to_message_id = params.reply_to_message_id;\r\n                }\r\n\r\n                if (params.reply_markup !== undefined)\r\n                {\r\n                    args.reply_markup = params.reply_markup;\r\n                }\r\n\r\n                _rest({\r\n                    method: 'POST',\r\n                    json: true,\r\n                    formData: args,\r\n                    uri: _baseurl + 'sendSticker'\r\n                })\r\n                .then(function(body)\r\n                {\r\n                    return commonResponseHandler(body);\r\n                })\r\n                .then(function(data)\r\n                {\r\n                    resolve(data);\r\n                })\r\n                .catch(function(err)\r\n                {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: sendVideo\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the message recepient — User or GroupChat id\r\n     *      video                   Video to send. You can either pass a file_id as String to resend\r\n     *                              a video that is already on the Telegram servers, or upload\r\n     *                              a new video using multipart/form-data.\r\n     *      reply_to_message_id     If the message is a reply, ID of the original message\r\n     *      reply_markup            Additional interface options. A JSON-serialized object for a custom\r\n     *                              reply keyboard, instructions to hide keyboard or to force a reply from the user.\r\n     *      duration                Duration in seconds (optional)\r\n     *      caption                 Video caption (may also be used when resending videos by file_id), 0-200 characters\r\n     */\r\n    this.sendVideo = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            // Act different depending on value params.video\r\n            fs.exists(params.video, function (exists)\r\n            {\r\n                var video = null;\r\n                if (exists)\r\n                {\r\n                    // params.video is path to file\r\n                    video = fs.createReadStream(params.video);\r\n                }\r\n                else\r\n                {\r\n                    // params.video is not a file, simply pass it to POST\r\n                    video = params.video;\r\n                }\r\n\r\n                var args = {\r\n                    chat_id: params.chat_id,\r\n                    video: video\r\n                };\r\n\r\n                if (params.reply_to_message_id !== undefined)\r\n                {\r\n                    args.reply_to_message_id = params.reply_to_message_id;\r\n                }\r\n\r\n                if (params.reply_markup !== undefined)\r\n                {\r\n                    args.reply_markup = params.reply_markup;\r\n                }\r\n\r\n                if (params.duration !== undefined)\r\n                {\r\n                    args.duration = params.duration;\r\n                }\r\n\r\n                if (params.caption !== undefined)\r\n                {\r\n                    args.caption = params.caption;\r\n                }\r\n\r\n                _rest({\r\n                    method: 'POST',\r\n                    json: true,\r\n                    formData: args,\r\n                    uri: _baseurl + 'sendVideo'\r\n                })\r\n                .then(function(body)\r\n                {\r\n                    return commonResponseHandler(body);\r\n                })\r\n                .then(function(data)\r\n                {\r\n                    resolve(data);\r\n                })\r\n                .catch(function(err)\r\n                {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: sendLocation\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the message recepient — User or GroupChat id\r\n     *      latitude                Latitude of location\r\n     *      longitude               Longitude of location\r\n     *      reply_to_message_id     If the message is a reply, ID of the original message\r\n     *      reply_markup            Additional interface options. A JSON-serialized object for a custom\r\n     *                              reply keyboard, instructions to hide keyboard or to force a reply from the user.\r\n     */\r\n    this.sendLocation = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            var args = {\r\n                chat_id: params.chat_id,\r\n                latitude: params.latitude,\r\n                longitude: params.longitude\r\n            };\r\n\r\n            if (params.reply_to_message_id !== undefined)\r\n            {\r\n                args.reply_to_message_id = params.reply_to_message_id;\r\n            }\r\n\r\n            if (params.reply_markup !== undefined)\r\n            {\r\n                args.reply_markup = params.reply_markup;\r\n            }\r\n\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'sendLocation'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: sendVenue\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the message recepient — User or GroupChat id\r\n     *      latitude                Latitude of location\r\n     *      longitude               Longitude of location\r\n     *      title                   Name of the venue\r\n     *      address                 Address of the venue\r\n     *      foursquare_id           Foursquare identifier of the venue\r\n     *      disable_notification    Sends the message silently. iOS users will not receive a notification,\r\n     *                              Android users will receive a notification with no sound.\r\n     *      reply_to_message_id     If the message is a reply, ID of the original message\r\n     *      reply_markup            Additional interface options. A JSON-serialized object for a custom\r\n     *                              reply keyboard, instructions to hide keyboard or to force a reply from the user.\r\n     */\r\n    this.sendVenue = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: params,\r\n                uri: _baseurl + 'sendVenue'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: sendContact\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the message recepient — User or GroupChat id\r\n     *      phone_number            Contact's phone number\r\n     *      first_name              Contact's first name\r\n     *      last_name               Contact's last name\r\n     *      disable_notification    Sends the message silently. iOS users will not receive a notification,\r\n     *                              Android users will receive a notification with no sound.\r\n     *      reply_to_message_id     If the message is a reply, ID of the original message\r\n     *      reply_markup            Additional interface options. A JSON-serialized object for a custom\r\n     *                              reply keyboard, instructions to hide keyboard or to force a reply from the user.\r\n     */\r\n    this.sendContact = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: params,\r\n                uri: _baseurl + 'sendContact'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: kickChatMember\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the target group or\r\n     *                              username of the target supergroup (in the format @supergroupusername)\r\n     *      user_id                 Unique identifier of the target user\r\n     */\r\n    this.kickChatMember = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: params,\r\n                uri: _baseurl + 'kickChatMember'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: unbanChatMember\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the target group or\r\n     *                              username of the target supergroup (in the format @supergroupusername)\r\n     *      user_id                 Unique identifier of the target user\r\n     */\r\n    this.unbanChatMember = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: params,\r\n                uri: _baseurl + 'unbanChatMember'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: leaveChat\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the target group or\r\n     *                              username of the target supergroup (in the format @supergroupusername)\r\n     */\r\n    this.leaveChat = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: params,\r\n                uri: _baseurl + 'leaveChat'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: getChat\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the target group or\r\n     *                              username of the target supergroup (in the format @supergroupusername)\r\n     */\r\n    this.getChat = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: params,\r\n                uri: _baseurl + 'getChat'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: getChatAdministrators\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the target group or\r\n     *                              username of the target supergroup (in the format @supergroupusername)\r\n     */\r\n    this.getChatAdministrators = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: params,\r\n                uri: _baseurl + 'getChatAdministrators'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: getChatMembersCount\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the target group or\r\n     *                              username of the target supergroup (in the format @supergroupusername)\r\n     */\r\n    this.getChatMembersCount = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: params,\r\n                uri: _baseurl + 'getChatMembersCount'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: getChatMember\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the target group or\r\n     *                              username of the target supergroup (in the format @supergroupusername)\r\n     *      user_id                 Unique identifier of the target user\r\n     */\r\n    this.getChatMember = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: params,\r\n                uri: _baseurl + 'getChatMember'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: sendChatAction\r\n     * PARAMS:\r\n     *      chat_id                 Unique identifier for the message recepient — User or GroupChat id\r\n     *      action                  Type of action to broadcast. Choose one, depending on what the user\r\n     *                              is about to receive: typing for text messages, upload_photo for photos,\r\n     *                              record_video or upload_video for videos, record_audio or upload_audio\r\n     *                              for audio files, upload_document for general files, find_location for location data\r\n     */\r\n    this.sendChatAction = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            var args = {\r\n                chat_id: params.chat_id,\r\n                action: params.action\r\n            };\r\n\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'sendChatAction'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: getUserProfilePhotos\r\n     * PARAMS:\r\n     *      user_id                 Unique identifier of the target user\r\n     *      offset                  Sequential number of the first photo to be returned. By default, all photos are returned\r\n     *      limit                   Limits the number of photos to be retrieved. Values between 1—100 are accepted. Defaults to 100\r\n     */\r\n    this.getUserProfilePhotos = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            var args = {};\r\n\r\n            if (params.user_id !== undefined) args.user_id = params.user_id;\r\n            if (params.offset !== undefined) args.offset = params.offset;\r\n            if (params.limit !== undefined) args.limit = params.limit;\r\n\r\n            _rest({\r\n                method: 'GET',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'getUserProfilePhotos'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: getUpdates\r\n     * PARAMS:\r\n     *      offset                  Identifier of the first update to be returned. Must be greater by one than the highest\r\n     *                              among the identifiers of previously received updates. By default, updates starting with\r\n     *                              the earliest unconfirmed update are returned. An update is considered confirmed as soon as\r\n     *                              getUpdates is called with an offset higher than its update_id.\r\n     *      limit                   Limits the number of updates to be retrieved. Values between 1—100 are accepted. Defaults to 100\r\n     *      timeout                 Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling\r\n     */\r\n    this.getUpdates = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            var args = {};\r\n\r\n            if (params.timeout !== undefined) args.timeout = params.timeout;\r\n            if (params.offset !== undefined) args.offset = params.offset;\r\n            if (params.limit !== undefined) args.limit = params.limit;\r\n\r\n            _rest({\r\n                method: 'GET',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'getUpdates'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: setWebhook\r\n     * PARAMS:\r\n     *      url                     HTTPS url to send updates to. Use an empty string to remove webhook integration\r\n     *      certificate             Filename of public key certificate (optional)\r\n     */\r\n    this.setWebhook = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            var args = {};\r\n\r\n            if (params.url !== undefined) args.url = params.url;\r\n            if (!params.certificate)\r\n            {\r\n                return _rest({\r\n                    method: 'POST',\r\n                    json: true,\r\n                    formData: args,\r\n                    uri: _baseurl + 'setWebhook'\r\n                })\r\n                .then(commonResponseHandler)\r\n                .then(resolve)\r\n                .catch(reject);\r\n            }\r\n\r\n            // Check existance of certificate\r\n            fs.exists(params.certificate, function (exists)\r\n            {\r\n                if (exists)\r\n                {\r\n                    // params.video is path to file\r\n                    args.certificate = fs.createReadStream(params.certificate);\r\n                }\r\n\r\n                _rest({\r\n                    method: 'POST',\r\n                    json: true,\r\n                    formData: args,\r\n                    uri: _baseurl + 'setWebhook'\r\n                })\r\n                .then(function(body)\r\n                {\r\n                    return commonResponseHandler(body);\r\n                })\r\n                .then(function(data)\r\n                {\r\n                    resolve(data);\r\n                })\r\n                .catch(function(err)\r\n                {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: getFile\r\n     * PARAMS:\r\n     *      file_id                 File identifier to get info about\r\n     */\r\n    this.getFile = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            var args = {};\r\n\r\n            if (params.file_id !== undefined) args.file_id = params.file_id;\r\n\r\n            _rest({\r\n                method: 'GET',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'getFile'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: answerInlineQuery\r\n     * PARAMS:\r\n     *      inline_query_id         Unique identifier for the answered query\r\n     *      results                 Array of results for the inline query (API will serialize it by itself)\r\n     *      cache_time              The maximum amount of time in seconds that the result of the inline\r\n     *                              query may be cached on the server. Defaults to 300.\r\n     *      is_personal             Pass True, if results may be cached on the server side only for the user\r\n     *                              that sent the query. By default, results may be returned to any user\r\n     *                              who sends the same query\r\n     *      next_offset             Pass the offset that a client should send in the next query with\r\n     *                              the same text to receive more results. Pass an empty string if there are\r\n     *                              no more results or if you don‘t support pagination. Offset length can’t exceed 64 bytes.\r\n     */\r\n    this.answerInlineQuery = function (params, cb)\r\n    {\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n            var args = {};\r\n\r\n            if (params.inline_query_id !== undefined) args.inline_query_id = params.inline_query_id;\r\n            if (params.results !== undefined) args.results = JSON.stringify(params.results);\r\n            if (params.cache_time !== undefined) args.cache_time = params.cache_time;\r\n            if (params.is_personal !== undefined) args.is_personal = params.is_personal;\r\n            if (params.next_offset !== undefined) args.next_offset = params.next_offset;\r\n\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'answerInlineQuery'\r\n            })\r\n            .then(function(body)\r\n            {\r\n                return commonResponseHandler(body);\r\n            })\r\n            .then(function(data)\r\n            {\r\n                resolve(data);\r\n            })\r\n            .catch(function(err)\r\n            {\r\n                reject(err);\r\n            });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: answerCallbackQuery\r\n     * PARAMS:\r\n     *      callback_query_id       Unique identifier for the query to be answered\r\n     *      text                    Text of the notification. If not specified, nothing will be shown to the user\r\n     *      show_alert              If true, an alert will be shown by the client instead of a notificaiton at the\r\n     *                              top of the chat screen. Defaults to false.\r\n     */\r\n    this.answerCallbackQuery = function (params, cb) {\r\n        return new Promise(function (resolve, reject) {\r\n            var args = {};\r\n\r\n            if (params.callback_query_id !== undefined) args.callback_query_id = params.callback_query_id;\r\n            if (params.text !== undefined) args.text = params.text;\r\n            if (params.show_alert !== undefined) args.show_alert = JSON.stringify(params.show_alert);\r\n\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'answerCallbackQuery'\r\n            })\r\n                .then(function (body) {\r\n                    return commonResponseHandler(body);\r\n                })\r\n                .then(function (data) {\r\n                    resolve(data);\r\n                })\r\n                .catch(function (err) {\r\n                    reject(err);\r\n                });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: editMessageText\r\n     * PARAMS:\r\n     *      chat_id                     Unique identifier for the message recepient — User or GroupChat id\r\n     *      message_id                  Required if inline_message_id is not specified. Unique identifier of the sent message\r\n     *      inline_message_id           Required if chat_id and message_id are not specified. Identifier of the inline message\r\n     *      text                        Text of the message to be sent\r\n     *      parse_mode                  Send Markdown, if you want Telegram apps to show bold, italic and\r\n     *                                  inline URLs in your bot's message\r\n     *      disable_web_page_preview    Disables link previews for links in this message\r\n     *      reply_markup                Additional interface options. A JSON-serialized object\r\n     *                                  for a custom reply keyboard, instructions to hide keyboard\r\n     *                                  or to force a reply from the user.\r\n     */\r\n    this.editMessageText = function (params, cb) {\r\n        var args = {};\r\n\r\n        if (params.chat_id !== undefined) args.chat_id = params.chat_id;\r\n        if (params.message_id !== undefined) args.message_id = params.message_id;\r\n        if (params.inline_message_id !== undefined) args.inline_message_id = params.inline_message_id;\r\n        if (params.text !== undefined) args.text = params.text;\r\n        if (params.parse_mode !== undefined) args.parse_mode = params.parse_mode;\r\n        if (params.disable_web_page_preview !== undefined) args.disable_web_page_preview = params.disable_web_page_preview;\r\n        if (params.reply_markup !== undefined) args.reply_markup = params.reply_markup;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'editMessageText'\r\n            })\r\n                .then(function (body) {\r\n                    return commonResponseHandler(body);\r\n                })\r\n                .then(function (data) {\r\n                    resolve(data);\r\n                })\r\n                .catch(function (err) {\r\n                    reject(err);\r\n                });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: editMessageCaption\r\n     * PARAMS:\r\n     *      chat_id                     Unique identifier for the message recepient — User or GroupChat id\r\n     *      message_id                  Required if inline_message_id is not specified. Unique identifier of the sent message\r\n     *      inline_message_id           Required if chat_id and message_id are not specified. Identifier of the inline message\r\n     *      caption                     New caption of the message\r\n     *      reply_markup                Additional interface options. A JSON-serialized object\r\n     *                                  for a custom reply keyboard, instructions to hide keyboard\r\n     *                                  or to force a reply from the user.\r\n     */\r\n    this.editMessageCaption = function (params, cb) {\r\n        var args = {};\r\n\r\n        if (params.chat_id !== undefined) args.chat_id = params.chat_id;\r\n        if (params.message_id !== undefined) args.message_id = params.message_id;\r\n        if (params.inline_message_id !== undefined) args.inline_message_id = params.inline_message_id;\r\n        if (params.caption !== undefined) args.caption = params.caption;\r\n        if (params.reply_markup !== undefined) args.reply_markup = params.reply_markup;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'editMessageCaption'\r\n            })\r\n                .then(function (body) {\r\n                    return commonResponseHandler(body);\r\n                })\r\n                .then(function (data) {\r\n                    resolve(data);\r\n                })\r\n                .catch(function (err) {\r\n                    reject(err);\r\n                });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n    /**\r\n     * METHOD: editMessageReplyMarkup\r\n     * PARAMS:\r\n     *      chat_id                     Unique identifier for the message recepient — User or GroupChat id\r\n     *      message_id                  Required if inline_message_id is not specified. Unique identifier of the sent message\r\n     *      inline_message_id           Required if chat_id and message_id are not specified. Identifier of the inline message\r\n     *      reply_markup                Additional interface options. A JSON-serialized object\r\n     *                                  for a custom reply keyboard, instructions to hide keyboard\r\n     *                                  or to force a reply from the user.\r\n     */\r\n    this.editMessageReplyMarkup = function (params, cb) {\r\n        var args = {};\r\n\r\n        if (params.chat_id !== undefined) args.chat_id = params.chat_id;\r\n        if (params.message_id !== undefined) args.message_id = params.message_id;\r\n        if (params.inline_message_id !== undefined) args.inline_message_id = params.inline_message_id;\r\n        if (params.reply_markup !== undefined) args.reply_markup = params.reply_markup;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            _rest({\r\n                method: 'POST',\r\n                json: true,\r\n                formData: args,\r\n                uri: _baseurl + 'editMessageReplyMarkup'\r\n            })\r\n                .then(function (body) {\r\n                    return commonResponseHandler(body);\r\n                })\r\n                .then(function (data) {\r\n                    resolve(data);\r\n                })\r\n                .catch(function (err) {\r\n                    reject(err);\r\n                });\r\n        }).nodeify(cb);\r\n    };\r\n\r\n\r\n    // Start updates retrieving loop\r\n    if (_settings.updates.enabled)\r\n    {\r\n        internalGetUpdates();\r\n    }\r\n};\r\n\r\nutil.inherits(TelegramApi, EventEmitter);\r\nmodule.exports = TelegramApi;\r\n"}